#!/bin/sh
# if using vim, do ':set ft=zsh' for easier reading

# run the parent EAP assemble script, but do not allow it to clear the local mav
en repository
# after the build, as it is used by KIE to load kjars and their dependencies
mcr=$(echo "${MAVEN_CLEAR_REPO}" | tr [:upper:] [:lower:])
if [ "${mcr}" = "true" ]; then
    >&2 echo "WARNING: Cannot clear local maven repository as KIE depends on it.
 Overriding MAVEN_CLEAR_REPO to false."
    MAVEN_CLEAR_REPO="false"
    export MAVEN_CLEAR_REPO
fi


echo "BUILD NUMBER: $BUILD_JOB_NUMBER"
echo "ALTERNATE ARTIFACT REPO URL $REPO_URL"

# Source code provided to S2I is at ${HOME}/source
LOCAL_SOURCE_DIR=${HOME}/source
mkdir -p $LOCAL_SOURCE_DIR

# Resulting WAR files will be deployed to /opt/eap/standalone/deployments
DEPLOY_DIR=$JBOSS_HOME/standalone/deployments

# JBoss AS data dir. Can be overridden.
DATA_DIR=${DATA_DIR:-$JBOSS_HOME/data}

# the subdirectory within LOCAL_SOURCE_DIR from where we should copy build
# artifacts (*.war, *.jar)
ARTIFACT_DIR=${ARTIFACT_DIR:-target}

# Copy the source for compilation
cp -ad /tmp/src/* $LOCAL_SOURCE_DIR

if [ -d $LOCAL_SOURCE_DIR/configuration ]; then
  echo "Copying config files from project..."

  if [ -f $LOCAL_SOURCE_DIR/configuration/settings.xml ]; then
    mkdir -p $HOME/.m2
    mv $LOCAL_SOURCE_DIR/configuration/settings.xml $HOME/.m2
  fi

  cp -v $LOCAL_SOURCE_DIR/configuration/* $JBOSS_HOME/standalone/configuration/
fi

configure_proxy
configure_mirrors

manage_incremental_build


# If a pom.xml is present, this is a normal build scenario
# so run maven.
if [ -f "$LOCAL_SOURCE_DIR/pom.xml" ]; then
  pushd $LOCAL_SOURCE_DIR &> /dev/null

  MAVEN_ARGS=${MAVEN_ARGS--e -Popenshift -DskipTests -Dcom.redhat.xpaas.repo.redhatga package}

  # Always force IPv4 (CLOUD-188)
  # Append user-supplied arguments (CLOUD-412)
  MAVEN_ARGS="$MAVEN_ARGS -Djava.net.preferIPv4Stack=true ${MAVEN_ARGS_APPEND}"

  echo "Found pom.xml... Red Hat Labs skipping maven build"

  # download artifact from nexus
  GROUP_ID=`xmllint --xpath "//*[local-name()='project']/*[local-name()='groupId']/text()" pom.xml | sed 's/\./\//g'`
  ART_ID=`xmllint --xpath "//*[local-name()='project']/*[local-name()='artifactId']/text()" pom.xml`
  APP_VERSION=`xmllint --xpath "//*[local-name()='project']/*[local-name()='version']/text()" pom.xml`
  APP_VERSION="${APP_VERSION//-SNAPSHOT}"
  PACKAGING=`xmllint --xpath "//*[local-name()='project']/*[local-name()='packaging']/text()" pom.xml`
  ARTIFACT_TYPE=$PACKAGING

  if [ "$PACKAGING" == "kjar" ]; then 
    ARTIFACT_TYPE="jar"
  fi

  NEXUS_URL=$REPO_URL

  if [ -z "$NEXUS_URL" ]; then
    NEXUS_URL=`xmllint --xpath "//*[local-name()='project']/*[local-name()='distributionManagement']/*[local-name()='repository']/*[local-name()='url']/text()" pom.xml`
  fi

  NEXUS_WAR_URL=$NEXUS_URL$GROUP_ID/$ART_ID/$APP_VERSION-$BUILD_JOB_NUMBER/$ART_ID-$APP_VERSION-$BUILD_JOB_NUMBER.$ARTIFACT_TYPE
  echo "Artifact $ARTIFACT_TYPE url is -"$NEXUS_WAR_URL"-...."


  # copy app data, if specified
  if [ -n "${APP_DATADIR+_}" ] && [ -d "$LOCAL_SOURCE_DIR/$APP_DATADIR" ]; then
    echo "Copying app data to $DATA_DIR..."
    src="$LOCAL_SOURCE_DIR/$APP_DATADIR"
    [ -d "$DATA_DIR" ] && src="$src/*" # avoid glob if possible
    cp -av "$src" "$DATA_DIR"
  fi

  # optionally clear the local maven repository after the build
  # clear_maven_repository

  popd &> /dev/null
fi

if [ -d $LOCAL_SOURCE_DIR/modules ]; then
  echo "Copying modules from project..."
  cp -vr $LOCAL_SOURCE_DIR/modules/* $JBOSS_HOME/modules/
fi

echo "Copying artifact to deployment root " ${NEXUS_WAR_URL}
curl -o ${DEPLOY_DIR}/$ART_ID-$APP_VERSION-$BUILD_JOB_NUMBER.$ARTIFACT_TYPE -O ${NEXUS_WAR_URL}


echo "Labs Deploying kjars"


# install all KIE kjars into local m2 repository
$JBOSS_HOME/bin/kieserver-install.sh

# ensure all KIE dependencies are pulled for offline use
$JBOSS_HOME/bin/kieserver-pull.sh

exit 0
